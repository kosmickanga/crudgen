<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ output extension=".txt" #>

using CrudGen.Runtime;
using GridMvc.Server;
using GridShared;
using GridShared.Utility;
using Microsoft.AspNetCore.Http;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Primitives;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using <#= _namespace #>.Data;

// Autogenerated file, do not edit. 
// Created <#= DateTime.Now #>
// CrudGen V<#= Assembly.GetEntryAssembly().GetCustomAttribute<AssemblyFileVersionAttribute>().Version #>


namespace <#= _namespace #>.Services
{
	public class <#= _serviceName #>
    {
        IDbContextFactory<<#= _context #>> _factory;
        public <#= _serviceName #>(IDbContextFactory<<#= _context #>> factory)
        {
            _factory = factory;
        }
        public async Task<ItemsDTO<<#=_type #>>> GetGridRowsAsync(Action<IGridColumnCollection<<#= _type#>>> columns,
            QueryDictionary<StringValues> query)
        {
            using var context = _factory.CreateDbContext();
            var qry = context.<#=_query #>.AsQueryable();
<# if (_filters != null) { #>
            string filter = null;
            if (query.TryGetValue("state", out var filterStrings))
                filter = filterStrings.ToString();
<#   var filterItems = _filters.Where(qry => !string.IsNullOrEmpty(qry.Query)).ToList();
     if (filterItems.Any()) { #>
            switch (filter) 
            {
<#     foreach (var f in filterItems) {  #>
                case "<#= f.Value #>": qry = qry.Where(<#= f.Query #>); break;
<#     } #>
             }
<# 
     }
   } #>
            var items = await qry.ToListAsync();

            var server = new GridServer<<#= _type #>>(items, new QueryCollection(query), true, "<#= _gridName #>", columns, 10);
            server.Sortable(true).Filterable(true).WithGridItemsCount();

            return server.ItemsToDisplay;
        }
    }


}
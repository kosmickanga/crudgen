<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>

<#@ output extension=".txt" #>
using GridShared;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using CrudGen.Runtime;
using <#= _namespace #>.Data;

// Autogenerated file, do not edit. 
// Created <#= DateTime.Now #>
// CrudGen V<#= Assembly.GetEntryAssembly().GetCustomAttribute<AssemblyFileVersionAttribute>().Version #>

namespace <#= _namespace #>.Services
{
    public class <#= _serviceName #> : ICrudDataService<<#= _class #>>
    {
        private readonly IDbContextFactory<<#= _dataContext #>> _contextFactory;

        public <#= _serviceName #>(IDbContextFactory<<#= _dataContext #>> factory)
        {
            _contextFactory = factory;
        }
        public async Task Delete(params object[] keys)
        {
            using var inst = _contextFactory.CreateDbContext();
            var item = await inst.<#= _class #>.FindAsync(keys);
            if (item != null)
            {
                inst.Remove(item);
                await inst.SaveChangesAsync();
            }
        }

        public async Task<<#= _class #>> Get(params object[] keys)
        {
            using var inst = _contextFactory.CreateDbContext();
            var result = await inst.<#= _class #>.FindAsync(keys);
            return result;
        }

        public async Task Insert(<#= _class #> item)
        {
            using var inst = _contextFactory.CreateDbContext();
            inst.<#= _class #>.Add(item);
            await inst.SaveChangesAsync();
        }

        public async Task Update(<#= _class #> item)
        {
            using var inst = _contextFactory.CreateDbContext();
            inst.<#= _class #>.Update(item);
            await inst.SaveChangesAsync();


        }
    }
}

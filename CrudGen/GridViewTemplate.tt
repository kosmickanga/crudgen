<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ output extension=".txt" #>
@page "<#= _page #>"
<# if (_filters.Any()) { #>
@page "<#= _page #>/{state}"
<# } #>
@attribute [Authorize]

@using GridBlazor
@using GridBlazor.Pages
@using GridShared
@using GridShared.Utility
@using Microsoft.Extensions.Primitives
@using CrudGen.Runtime
@using <#= _namespace #>.Data
@using <#= _namespace #>.Services

@*
Autogenerated file, do not edit. 
Created <#= DateTime.Now #>
CrudGen V<#= Assembly.GetEntryAssembly().GetCustomAttribute<AssemblyFileVersionAttribute>().Version #>
*@


@inject <#= _gridServiceName #> GridService
@inject <#= _crudServiceName #> CrudService

<# foreach (var r in GetRefFieldNames()) {
#>
@inject <#= LookupServiceName(r) #> <#= LookupServiceInst(r) #>
<#
}
#>

@if (_task.IsCompleted)
{
<# if (_filters.Any()) { #>
  @if (_grid.Mode== GridMode.Grid) {
    <<#= _filterClass #> State=@State OnStateChanged=@FilterStateChanged /> 
  }
<# } #>
   <GridComponent T="<#= _itemClass #>" Grid="@_grid" @ref=_gridComponent></GridComponent>
}
else
{
    <p><em>Loading...</em></p>
}

@code {
    private CGrid<<#= _itemClass #>> _grid;
    private Task _task;
    private GridComponent<<#= _itemClass #>> _gridComponent;
    private bool _initGridComponent;
<# if (_filters.Any()) { #>
    [Parameter]
    public string State {get; set;}

    private async Task FilterStateChanged(string newValue) 
    {
        //_state = args.Value.ToString();
        State = newValue;
        // Debug.Print("Parent: We have a change => {0}", State);
        _grid.AddQueryParameter("state", State);
        await _gridComponent?.UpdateGrid();
    }

    protected override void OnInitialized()
    {
        State = State ?? "all"; // returns all by default due to switch fall through.
    }
<# } #>

    protected override void OnAfterRender(bool firstRender) 
    {
        if (!_initGridComponent && _gridComponent != null) 
        {
            _gridComponent.BeforeInsert += BeforeInsert;
            _gridComponent.BeforeUpdate += BeforeUpdate;
            _initGridComponent = true;
        }
    }
#region Validation
    private bool ValidateItem(ValidationArgs args, <#= _itemClass #> c) 
    {
        // generated code will be inserted here.
        return true;
    }

    private async Task<bool> BeforeUpdate(GridUpdateComponent<<#= _itemClass #>> gridComponent, <#= _itemClass #> c)
    {
        var args = new ValidationArgs(false, gridComponent.ColumnErrors);
        if (!ValidateItem(args, c)) 
        {
            gridComponent.Error = args.Error;
            return false;
        }
        return await DoValidateAsync(args, c);

    }
    private async Task<bool> BeforeInsert(GridCreateComponent<<#= _itemClass #>> gridComponent, <#= _itemClass #> c) 
    {
        var args = new ValidationArgs(false, gridComponent.ColumnErrors);
        if (!ValidateItem(args, c)) 
        {
            gridComponent.Error = args.Error;
            return false;
        }

        return await Task.FromResult(true);
    }

#endregion
#region GridModeHandling
    private GridShared.GridMode _lastMode = GridMode.Grid;
    Task OnAfterRender(GridComponent<Todo> component, bool firstRender) {
        // the view may show information relating to the grid, but the grid has gone
        if (component.Mode != _lastMode) {
            _lastMode = _grid.Mode;
            StateHasChanged();
        }
        return Task.CompletedTask;
    }
#endregion

    protected override async Task OnParametersSetAsync()
    {
        Action<IGridColumnCollection<<#= _itemClass #>>> columns = c =>
        {
<# foreach (var f in _class.Fields) 
{ #>
            <#= GenerateColumn(f) #>
<# } #>
        };

        var query = new QueryDictionary<StringValues>();
        query.Add("grid-page", "2");

        var client = new GridClient<<#= _itemClass #>>(q => GridService.GetGridRowsAsync(columns, q), query, false, "<#= _itemClass #>Grid", columns);
        client.Sortable(true).Filterable(true).Crud(true, CrudService);
        _grid = client.Grid;
        _grid.OnAfterRender += OnAfterRender;

        // Set new items to grid
        _task = client.UpdateGrid();
        await _task;
    }
}

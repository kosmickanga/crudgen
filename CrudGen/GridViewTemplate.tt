<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".txt" #>
@page "<#= _page #>"
@using GridBlazor
@using GridBlazor.Pages
@using GridShared
@using GridShared.Utility
@using Microsoft.Extensions.Primitives
@using <#= _namespace #>.Data;
@using <#= _namespace #>.Services;

@inject <#= _gridServiceName #> GridService
@inject <#= _crudServiceName #> CrudService

<# foreach (var r in GetRefFieldNames()) {
#>
@inject <#= LookupServiceName(r) #> <#= LookupServiceInst(r) #>
<#
}
#>

@*
@inject CustomerService customerService
*@

@if (_task.IsCompleted)
{
    <GridComponent T="<#= _itemClass #>" Grid="@_grid"></GridComponent>
}
else
{
    <p><em>Loading...</em></p>
}

@code {
        private CGrid<<#= _itemClass #>> _grid;
        private Task _task;

        protected override async Task OnParametersSetAsync()
        {
            Action<IGridColumnCollection<<#= _itemClass #>>> columns = c =>
            {
<# foreach (var f in _class.Fields) 
{ #>
                <#= GenerateColumn(f) #>
<# } #>
            };

            var query = new QueryDictionary<StringValues>();
            query.Add("grid-page", "2");

            var client = new GridClient<<#= _itemClass #>>(q => GridService.GetGridRows(columns, q), query, false, "<#= _itemClass #>Grid", columns);
            client.Sortable(true).Filterable(true).Crud(true, CrudService);
            _grid = client.Grid;

            // Set new items to grid
            _task = client.UpdateGrid();
            await _task;
        }
}
